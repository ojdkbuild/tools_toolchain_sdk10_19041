<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Windows.UI.Xaml.Hosting.HostingContract</name>
  </assembly>
  <members>
    <member name="T:Windows.UI.Xaml.Hosting.DesignerAppExitedEventArgs">
      <summary>DesignerAppManager.DesignerAppExited 이벤트에 대한 이벤트 데이터를 제공합니다.</summary>
    </member>
    <member name="P:Windows.UI.Xaml.Hosting.DesignerAppExitedEventArgs.ExitCode">
      <summary>앱이 종료된 종료 코드를 가져옵니다.</summary>
      <returns>앱이 종료된 종료 코드입니다.</returns>
    </member>
    <member name="T:Windows.UI.Xaml.Hosting.DesignerAppManager">
      <summary>XamlUIPresenter를 사용하고 Win32 프로세스에서 실행되는 기존 디자이너와 달리 일반 UWP 컨텍스트에서 실행되는 XAML 디자인 화면에서 응용 프로그램을 관리합니다. 이 모드에서 활성화되려면 프로세스에서 .APPX에 NoUIEntryPoints-DesignModeV2 DisplayName 속성을 지정해야 합니다. 시작된 응용 프로그램은 작업 표시줄이나 TaskView 전환기에 표시되지 않습니다.</summary>
    </member>
    <member name="M:Windows.UI.Xaml.Hosting.DesignerAppManager.#ctor(System.String)">
      <summary>DesignerAppManager 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="appUserModelId">앱 사용자 모델의 식별자입니다.</param>
    </member>
    <member name="P:Windows.UI.Xaml.Hosting.DesignerAppManager.AppUserModelId">
      <summary>앱 사용자 모델의 식별자를 가져옵니다.</summary>
      <returns>앱 사용자 모델의 식별자입니다.</returns>
    </member>
    <member name="E:Windows.UI.Xaml.Hosting.DesignerAppManager.DesignerAppExited">
      <summary>디자이너에서 앱이 종료될 때 발생합니다.</summary>
    </member>
    <member name="M:Windows.UI.Xaml.Hosting.DesignerAppManager.Close">
      <summary>앱 관리자를 닫습니다. DesignerAppManager에서 활성화된 프로세스를 닫고 프로세스가 종료되기를 기다립니다. 프로세스가 멈춘 경우 이 메서드가 무기한 차단할 수 있습니다. 수동으로 닫을 때 DesignerAppExited 이벤트가 발생하지 않습니다.</summary>
    </member>
    <member name="M:Windows.UI.Xaml.Hosting.DesignerAppManager.CreateNewViewAsync(Windows.UI.Xaml.Hosting.DesignerAppViewState,Windows.Foundation.Size)">
      <summary>새로운 DesignerAppView를 만듭니다.</summary>
      <param name="initialViewState">보기의 초기 상태입니다.</param>
      <param name="initialViewSize">보기의 초기 크기입니다.</param>
      <returns>생성된 DesignerAppView입니다.</returns>
    </member>
    <member name="M:Windows.UI.Xaml.Hosting.DesignerAppManager.LoadObjectIntoAppAsync(System.String,System.Guid,System.String)">
      <summary>지정된 개체를 앱에 로드합니다.</summary>
      <param name="dllName">DLL의 이름입니다.</param>
      <param name="classId">클래스의 식별자입니다.</param>
      <param name="initializationData">개체를 초기화할 데이터입니다.</param>
      <returns>작업에 대한 비동기 결과입니다. 비동기 호출이 완료된 때를 결정하는 데 사용합니다.</returns>
    </member>
    <member name="T:Windows.UI.Xaml.Hosting.DesignerAppView">
      <summary>XAML Design Surface의 앱 보기를 나타냅니다.</summary>
    </member>
    <member name="P:Windows.UI.Xaml.Hosting.DesignerAppView.ApplicationViewId">
      <summary>앱 보기의 식별자를 가져옵니다.</summary>
      <returns>앱 보기의 식별자입니다.</returns>
    </member>
    <member name="P:Windows.UI.Xaml.Hosting.DesignerAppView.AppUserModelId">
      <summary>앱 사용자 모델의 식별자를 가져옵니다.</summary>
      <returns>앱 사용자 모델의 식별자입니다.</returns>
    </member>
    <member name="P:Windows.UI.Xaml.Hosting.DesignerAppView.ViewSize">
      <summary>디자이너 앱 보기의 크기를 가져옵니다.</summary>
      <returns>디자이너 앱 보기의 크기입니다.</returns>
    </member>
    <member name="P:Windows.UI.Xaml.Hosting.DesignerAppView.ViewState">
      <summary>보기의 표시 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>보기가 **Visible**인지, **Hidden**인지를 나타내는 값입니다.</returns>
    </member>
    <member name="M:Windows.UI.Xaml.Hosting.DesignerAppView.Close">
      <summary>디자이너에서 앱 보기를 닫습니다.</summary>
    </member>
    <member name="M:Windows.UI.Xaml.Hosting.DesignerAppView.UpdateViewAsync(Windows.UI.Xaml.Hosting.DesignerAppViewState,Windows.Foundation.Size)">
      <summary>디자이너에서 앱 보기를 업데이트합니다.</summary>
      <param name="viewState">앱 보기의 상태입니다.</param>
      <param name="viewSize">앱 보기의 크기입니다.</param>
      <returns>작업에 대한 비동기 결과입니다. 비동기 호출이 완료된 때를 결정하는 데 사용합니다.</returns>
    </member>
    <member name="T:Windows.UI.Xaml.Hosting.DesignerAppViewState">
      <summary>앱 보기의 표시 여부를 지정하는 상수를 정의합니다.</summary>
    </member>
    <member name="F:Windows.UI.Xaml.Hosting.DesignerAppViewState.Hidden">
      <summary>앱 보기가 숨겨집니다.</summary>
    </member>
    <member name="F:Windows.UI.Xaml.Hosting.DesignerAppViewState.Visible">
      <summary>앱 보기가 표시됩니다.</summary>
    </member>
    <member name="T:Windows.UI.Xaml.Hosting.DesktopWindowXamlSource">
      <summary>UWP가 아닌 데스크톱 응용 프로그램(예: WPF 또는 Windows Forms 응용 프로그램)이 창 핸들(HWND)과 연결된 모든 UI 요소에서 UWP 컨트롤을 호스팅할 수 있도록 합니다.</summary>
    </member>
    <member name="M:Windows.UI.Xaml.Hosting.DesktopWindowXamlSource.#ctor">
      <summary>DesktopWindowXamlSource 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:Windows.UI.Xaml.Hosting.DesktopWindowXamlSource.Content">
      <summary>데스크톱 응용 프로그램에 호스트할 Windows.UI.Xaml.UIElement 개체를 가져오거나 설정합니다.</summary>
      <returns>데스크톱 응용 프로그램에 호스트할 개체입니다.</returns>
    </member>
    <member name="P:Windows.UI.Xaml.Hosting.DesktopWindowXamlSource.HasFocus">
      <summary>현재 DesktopWindowXamlSource의 포커스가 데스크톱 응용 프로그램에 있는지 나타내는 값을 가져옵니다.</summary>
      <returns>현재 **DesktopWindowXamlSource**의 포커스가 데스크톱 응용 프로그램에 있으면 true, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="E:Windows.UI.Xaml.Hosting.DesktopWindowXamlSource.GotFocus">
      <summary>DesktopWindowXamlSource의 포커스가 데스크톱 응용 프로그램으로 이동될 때(예: **DesktopWindowXamlSource** 바로 앞에 위치한 요소에 포커스가 있는 상태에서 사용자가 **Tab** 키를 누르는 경우) 발생합니다.</summary>
    </member>
    <member name="E:Windows.UI.Xaml.Hosting.DesktopWindowXamlSource.TakeFocusRequested">
      <summary>호스트 데스크톱 응용 프로그램이 DesktopWindowXamlSource 개체로부터 요청 회수 포커스를 받을 때(예: 사용자가 **DesktopWindowXamlSource**의 마지막 포커스 가능 요소에 있고 **Tab** 키를 누르는 경우) 발생합니다.</summary>
    </member>
    <member name="M:Windows.UI.Xaml.Hosting.DesktopWindowXamlSource.Close">
      <summary>이 DesktopWindowXamlSource에서 사용하는 리소스를 닫고 해제합니다.</summary>
    </member>
    <member name="M:Windows.UI.Xaml.Hosting.DesktopWindowXamlSource.NavigateFocus(Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest)">
      <summary>프로그래밍 방식으로 데스크톱 응용 프로그램의 DesktopWindowXamlSource에 포커스를 주려고 시도합니다.</summary>
      <param name="request">포커스 탐색의 이유 및 기타 선택적 정보를 지정하는 개체입니다.</param>
      <returns>포커스 탐색 요청에 대한 데이터를 제공하는 개체입니다.</returns>
    </member>
    <member name="T:Windows.UI.Xaml.Hosting.DesktopWindowXamlSourceGotFocusEventArgs">
      <summary>GotFocus 이벤트에 대한 이벤트 데이터를 제공합니다.</summary>
    </member>
    <member name="P:Windows.UI.Xaml.Hosting.DesktopWindowXamlSourceGotFocusEventArgs.Request">
      <summary>포커스 탐색의 이유 및 기타 정보를 지정하는 XamlSourceFocusNavigationRequest 개체를 가져옵니다.</summary>
      <returns>포커스 탐색의 이유 및 기타 정보를 지정하는 개체입니다.</returns>
    </member>
    <member name="T:Windows.UI.Xaml.Hosting.DesktopWindowXamlSourceTakeFocusRequestedEventArgs">
      <summary>TakeFocusRequested 이벤트에 대한 이벤트 데이터를 제공합니다.</summary>
    </member>
    <member name="P:Windows.UI.Xaml.Hosting.DesktopWindowXamlSourceTakeFocusRequestedEventArgs.Request">
      <summary>포커스 탐색의 이유 및 기타 정보를 지정하는 XamlSourceFocusNavigationRequest 개체를 가져옵니다.</summary>
      <returns>포커스 탐색의 이유 및 기타 정보를 지정하는 개체입니다.</returns>
    </member>
    <member name="T:Windows.UI.Xaml.Hosting.HostingContract">
      <summary>
      </summary>
    </member>
    <member name="T:Windows.UI.Xaml.Hosting.IXamlUIPresenterHost">
      <summary>응용 프로그램에서 리소스를 확인하는 서비스를 나타냅니다. 이 인터페이스는 디자인 도구 호스팅 시나리오에 사용되며 일반적인 용도로 사용되지 않습니다.</summary>
    </member>
    <member name="M:Windows.UI.Xaml.Hosting.IXamlUIPresenterHost.ResolveFileResource(System.String)">
      <summary>경로에 지정된 리소스를 확인하고 문자열 파일 이름을 반환합니다.</summary>
      <param name="path">확인할 로컬 경로입니다.</param>
      <returns>확인된 파일 이름입니다.</returns>
    </member>
    <member name="T:Windows.UI.Xaml.Hosting.IXamlUIPresenterHost2">
      <summary>IXamlUIPresenterHost를 확장하여 GetGenericXamlFilePath를 추가합니다.</summary>
    </member>
    <member name="M:Windows.UI.Xaml.Hosting.IXamlUIPresenterHost2.GetGenericXamlFilePath">
      <summary>디자인 타임에 대체 generic.xaml 파일을 발표자 호스트로 로드합니다.</summary>
      <returns>대체 generic.xaml 파일의 위치에 대한 로컬 경로입니다.</returns>
    </member>
    <member name="T:Windows.UI.Xaml.Hosting.IXamlUIPresenterHost3">
      <summary>IXamlUIPresenterHost를 확장하여 ResolveDictionaryResource를 추가합니다.</summary>
    </member>
    <member name="M:Windows.UI.Xaml.Hosting.IXamlUIPresenterHost3.ResolveDictionaryResource(Windows.UI.Xaml.ResourceDictionary,System.Object,System.Object)">
      <summary>사전과 키로 지정된 리소스를 확인합니다.</summary>
      <param name="dictionary">리소스를 포함하는 사전입니다.</param>
      <param name="dictionaryKey">리소스 키입니다.</param>
      <param name="suggestedValue">제안된 값입니다.</param>
      <returns>리소스 개체입니다.</returns>
    </member>
    <member name="T:Windows.UI.Xaml.Hosting.WindowsXamlManager">
      <summary>UWP 컨트롤을 호스팅하는 UWP가 아닌 데스크톱 응용 프로그램(예: WPF나 Windows Forms 응용 프로그램)의 UWP XAML 프레임워크를 나타냅니다.</summary>
    </member>
    <member name="M:Windows.UI.Xaml.Hosting.WindowsXamlManager.Close">
      <summary>이 WindowsXamlManager에서 사용하는 리소스를 닫고 해제합니다.</summary>
    </member>
    <member name="M:Windows.UI.Xaml.Hosting.WindowsXamlManager.InitializeForCurrentThread">
      <summary>현재 스레드에서 비 UWP 데스크톱 응용 프로그램(예: WPF나 Windows Forms 응용 프로그램)의 UWP XAML 프레임워크를 초기화합니다.</summary>
      <returns>UWP XAML 프레임워크에 대한 참조를 포함하는 개체입니다.</returns>
    </member>
    <member name="T:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationReason">
      <summary>Windows.UI.Xaml.UIElement가 DesktopWindowXamlSource 개체를 사용하여 XAML 기반 UI를 호스트하는 데스크톱 응용 프로그램에서 포커스를 갖는 이유를 나타내는 값을 정의합니다. XamlSourceFocusNavigationRequest.Reason 속성은 이러한 값 중 하나를 반환합니다.</summary>
    </member>
    <member name="F:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationReason.Down">
      <summary>4방향 탐색 환경을 사용하여(예: 키보드의 화살표 키 사용) 아래쪽으로 탐색하는 사용자에 대한 응답으로 포커스가 설정되었습니다.</summary>
    </member>
    <member name="F:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationReason.First">
      <summary>양방향 탐색 환경을 사용하여(예: **Tab** 키 사용) 그 다음 요소를 탐색하는 사용자에 대한 응답으로 포커스가 설정되었습니다.</summary>
    </member>
    <member name="F:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationReason.Last">
      <summary>양방향 탐색 환경을 사용하여(예: **Shift-Tab** 키 사용) 이전 요소를 탐색하는 사용자에 대한 응답으로 포커스가 설정되었습니다.</summary>
    </member>
    <member name="F:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationReason.Left">
      <summary>4방향 탐색 환경을 사용하여(예: 키보드의 화살표 키 사용) 왼쪽으로 탐색하는 사용자에 대한 응답으로 포커스가 설정되었습니다.</summary>
    </member>
    <member name="F:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationReason.Programmatic">
      <summary>포커스가 프로그래밍 방식으로 설정되었습니다.</summary>
    </member>
    <member name="F:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationReason.Restore">
      <summary>**Alt** + **Tab** 키를 누르는 것처럼 작업을 전환한 후 포커스가 복원되었습니다.</summary>
    </member>
    <member name="F:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationReason.Right">
      <summary>4방향 탐색 환경을 사용하여(예: 키보드의 화살표 키 사용) 오른쪽으로 탐색하는 사용자에 대한 응답으로 포커스가 설정되었습니다.</summary>
    </member>
    <member name="F:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationReason.Up">
      <summary>4방향 탐색 환경을 사용하여(예: 키보드의 화살표 키 사용) 위쪽으로 탐색하는 사용자에 대한 응답으로 포커스가 설정되었습니다.</summary>
    </member>
    <member name="T:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest">
      <summary>DesktopWindowXamlSource 개체에 포커스를 주라는 요청에 대한 정보를 제공합니다.</summary>
    </member>
    <member name="M:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest.#ctor(Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationReason)">
      <summary>탐색 요청의 이유가 있는 XamlSourceFocusNavigationRequest 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="reason">탐색 요청의 이유를 나타내는 값입니다.</param>
    </member>
    <member name="M:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest.#ctor(Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationReason,Windows.Foundation.Rect)">
      <summary>탐색 요청의 이유와 탐색 포커스를 받는 경계 사각형이 있는 XamlSourceFocusNavigationRequest 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="reason">탐색 요청의 이유를 나타내는 값입니다.</param>
      <param name="hintRect">포커스를 잃는 데스크톱 응용 프로그램 요소(즉, DesktopWindowXamlSource가 포커스를 받기 전까지 포커스를 갖고 있던 요소)의 경계 사각형입니다. 이 매개 변수는 사용자가 4방향 탐색 환경을 사용하여(예: 키보드의 화살표 키 사용) **DesktopWindowXamlSource**를 입력할 때 UWP XAML 프레임워크에 대한 컨텍스트를 제공하는 데 사용됩니다. 자세한 내용은 설명을 참조하세요.</param>
    </member>
    <member name="M:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest.#ctor(Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationReason,Windows.Foundation.Rect,System.Guid)">
      <summary>탐색 요청의 이유, 탐색 포커스를 받는 경계 사각형, 요청에 대한 고유의 상관 관계 ID가 있는 XamlSourceFocusNavigationRequest 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="reason">탐색 요청의 이유를 나타내는 값입니다.</param>
      <param name="hintRect">포커스를 잃는 데스크톱 응용 프로그램 요소(즉, DesktopWindowXamlSource가 포커스를 받기 전까지 포커스를 갖고 있던 요소)의 경계 사각형입니다. 이 매개 변수는 사용자가 4방향 탐색 환경을 사용하여(예: 키보드의 화살표 키 사용) **DesktopWindowXamlSource**를 입력할 때 UWP XAML 프레임워크에 대한 컨텍스트를 제공하는 데 사용됩니다. 자세한 내용은 설명을 참조하세요.</param>
      <param name="correlationId">탐색 요청에 대한 고유 식별자입니다. 또는 이미 진행 중인 포커스 이동의 기존 상관 관계 ID가 있고 이 포커스 이동을 현재 탐색 요청과 연결하려는 경우 이 매개 변수를 로깅 용도로 사용할 수 있습니다.</param>
    </member>
    <member name="P:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest.CorrelationId">
      <summary>탐색 요청에 대한 고유 식별자를 가져옵니다. 또는 이미 진행 중인 포커스 이동의 기존 상관 관계 ID가 있고 이 포커스 이동을 새 탐색 요청과 연결하려는 경우 이 값을 로깅 용도로 사용할 수 있습니다.</summary>
      <returns>탐색 요청에 대한 고유 식별자입니다.</returns>
    </member>
    <member name="P:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest.HintRect">
      <summary>포커스를 잃는 데스크톱 응용 프로그램 요소(즉, DesktopWindowXamlSource가 포커스를 받기 전까지 포커스를 갖고 있던 요소)의 경계 사각형을 가져옵니다.</summary>
      <returns>포커스를 잃는 경계 사각형입니다.</returns>
    </member>
    <member name="P:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest.Reason">
      <summary>탐색 요청의 이유를 나타내는 XamlSourceFocusNavigationReason 값을 가져옵니다.</summary>
      <returns>탐색 요청의 이유를 나타내는 값입니다.</returns>
    </member>
    <member name="T:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationResult">
      <summary>요청에서 NavigateFocus 메서드를 사용하여 포커스를 DesktopWindowXamlSource 개체로 이동하기 위한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationResult.#ctor(System.Boolean)">
      <summary>XamlSourceFocusNavigationResult 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="focusMoved">포커스가 DesktopWindowXamlSource 개체로 성공적으로 이동하면 true, 그렇지 않으면 false입니다.</param>
    </member>
    <member name="P:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationResult.WasFocusMoved">
      <summary>포커스가 DesktopWindowXamlSource 개체로 성공적으로 이동했는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>포커스가 DesktopWindowXamlSource 개체로 성공적으로 이동하면 true, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="T:Windows.UI.Xaml.Hosting.XamlUIPresenter">
      <summary>Microsoft Direct3D 화면에서 시각적 트리를 사용합니다. 이 형식은 디자인 도구 호스팅 시나리오에 사용되며 일반적인 용도로 사용되지 않습니다.</summary>
    </member>
    <member name="P:Windows.UI.Xaml.Hosting.XamlUIPresenter.CompleteTimelinesAutomatically">
      <summary>호스트에서 항상 끝까지 실행되도록 할지 여부를 결정하는 값을 가져오거나 설정합니다.</summary>
      <returns>항상 시간 막대를 끝까지 실행하도록 하려면 **true**입니다. 그렇지 않으면 **false**입니다.</returns>
    </member>
    <member name="P:Windows.UI.Xaml.Hosting.XamlUIPresenter.RootElement">
      <summary>화면에 그릴 루트의 시각적 요소를 가져오거나 설정합니다.</summary>
      <returns>그릴 요소입니다.</returns>
    </member>
    <member name="P:Windows.UI.Xaml.Hosting.XamlUIPresenter.ThemeKey">
      <summary>ThemeResourcesXaml에서 사용할 테마 집합을 식별하는 문자열 키를 가져오거나 설정합니다.</summary>
      <returns>문자열 키입니다.</returns>
    </member>
    <member name="P:Windows.UI.Xaml.Hosting.XamlUIPresenter.ThemeResourcesXaml">
      <summary>리소스 사전을 지정하는 XAML을 가져오거나 설정합니다. 리소스 사전에는 호스트가 확인해야 하고 콘텐츠에 적용되어야 하는 테마가 들어 있습니다.</summary>
      <returns>문자열 형식으로 지정된 XAML 리소스 사전입니다.</returns>
    </member>
    <member name="M:Windows.UI.Xaml.Hosting.XamlUIPresenter.GetFlyoutPlacement(Windows.Foundation.Rect,Windows.Foundation.Size,Windows.Foundation.Size,Windows.Foundation.Rect,Windows.UI.Xaml.Controls.Primitives.FlyoutPlacementMode,System.Boolean,Windows.UI.Xaml.Controls.Primitives.FlyoutPlacementMode@)">
      <summary>배치 대상 및 해당 플라이아웃을 표시하는 컨트롤의 제안 크기를 사용하여 FlyoutBase 배치 논리를 호출합니다. 배치 논리 실행 결과인 범위를 반환합니다.</summary>
      <param name="placementTargetBounds">배치 대상 요소의 경계이며, FlyoutBase 발표자 논리로 전달됩니다.</param>
      <param name="controlSize">플라이아웃을 표시해야 하는 컨트롤의 원하는 크기입니다.</param>
      <param name="minControlSize">플라이아웃을 표시해야 하는 컨트롤의 최소 크기입니다.</param>
      <param name="containerRect">배치 대상 및 플라이아웃을 유지해야 하는 영역의 경계입니다.</param>
      <param name="targetPreferredPlacement">FlyoutBase 배치 논리에 사용할 원하는 배치 모드입니다.</param>
      <param name="allowFallbacks">배치 모드에 fallback을 사용할 수 있는 경우 **true**입니다. **false**이면 폴백을 사용할 수 없습니다.</param>
      <param name="chosenPlacement">호출된 FlyoutBase 배치 논리에서 사용하는 실제 배치 모드입니다.</param>
      <returns>FlyoutBase 배치 논리에 따라 계산된 경계입니다.</returns>
    </member>
    <member name="M:Windows.UI.Xaml.Hosting.XamlUIPresenter.GetFlyoutPlacementTargetInfo(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.Controls.Primitives.FlyoutPlacementMode,Windows.UI.Xaml.Controls.Primitives.FlyoutPlacementMode@,System.Boolean@)">
      <summary>호스트에서 플라이아웃도 표시하려는 배치 대상의 계산된 경계를 반환합니다. 추가 **out** 매개 변수는 바운드가 계산된 방법에 대한 추가 정보를 제공합니다.</summary>
      <param name="placementTarget">Flyout을 배치할 기준이 되는 배치 대상 요소입니다.</param>
      <param name="preferredPlacement">대상을 기준으로 한 호스트의 Flyout 기본 배치를 선언하는 열거형 값입니다. </param>
      <param name="targetPreferredPlacement">Flyout의 기본 설정 배치를 선언하는 열거형 값입니다.</param>
      <param name="allowFallbacks">Flyout 배치 논리에 fallback 배치가 허용되는 경우 **true**입니다. **false**이면 *targetPreferredPlacement* 값만 고려되어야 합니다.</param>
      <returns>계산된 배치 대상 범위입니다.</returns>
    </member>
    <member name="M:Windows.UI.Xaml.Hosting.XamlUIPresenter.NotifyWindowSizeChanged">
      <summary>Window.Current의 SizeChanged 이벤트를 호출합니다. 호스트가 호스트 설정에서 사용자 코드로 크기 변경 내용을 전파하는 데 사용되므로 디자인 모드 상호 작용을 실시간 상호 작용과 차별화할 수 있습니다.</summary>
    </member>
    <member name="M:Windows.UI.Xaml.Hosting.XamlUIPresenter.Present">
      <summary>화면을 호스트에 대한 동기 호출로 제공합니다.</summary>
    </member>
    <member name="M:Windows.UI.Xaml.Hosting.XamlUIPresenter.Render">
      <summary>화면을 렌더링합니다. 타이머를 통한 비동기 호출을 위한 것입니다.</summary>
    </member>
    <member name="M:Windows.UI.Xaml.Hosting.XamlUIPresenter.SetHost(Windows.UI.Xaml.Hosting.IXamlUIPresenterHost)">
      <summary>응용 프로그램 리소스 해상도에 사용할 IXamlUIPresenterHost 서비스 구현을 지정합니다.</summary>
      <param name="host">서비스 구현입니다.</param>
    </member>
    <member name="M:Windows.UI.Xaml.Hosting.XamlUIPresenter.SetSize(System.Int32,System.Int32)">
      <summary>화면의 너비와 높이를 지정합니다.</summary>
      <param name="width">너비(픽셀 단위)입니다.</param>
      <param name="height">높이(픽셀 단위)입니다.</param>
    </member>
  </members>
</doc>